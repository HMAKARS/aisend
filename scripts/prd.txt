개요(Overview)
AISEND는 사용자 맞춤형 여행 계획을 자동으로 생성해주는 인공지능 기반 여행 플래너 애플리케이션입니다. 카카오맵 API를 활용한 정확한 위치 정보, AI 기반 여행 추천 알고리즘, 그리고 Flutter로 구현된 크로스플랫폼 모바일 앱을 핵심으로 합니다.

대상 사용자
- 국내 여행을 계획하는 개인 여행자
- 다양한 여행 스타일과 선호도를 가진 사용자 (혼자, 연인, 가족, 친구)
- 효율적인 여행 동선과 시간 관리를 원하는 여행자

프로젝트 구조
 - /Users/hongbookpro/Desktop/DEV/aisend/aisend_app - 플러터프로젝트 디렉토리
 - /Users/hongbookpro/Desktop/DEV/aisend/aisend_backend - django backend 디렉토리
 - /Users/hongbookpro/Desktop/DEV/aisend/aisend_tour_data - dajngo 공공데이터모으기용 디렉토리
 - 실질적으로 aisend_app과 aisend_backend 의 프로젝트가 중심이고, asiend_tour_data는 별개의 프로젝트라 보면 됨.
 - asiend_backend 디렉토리 내부에 있는 attraction app은 지금은 사용되지 않으므로 삭제해도 무관.

핵심 기능(Core Features)
1. 카카오맵 API 기반 위치 서비스 (최우선순위)

핵심 동작:
- 장소 검색: 키워드, 카테고리, 위치 기반 검색
- 좌표 변환: 주소 ↔ 좌표 상호 변환
- 거리 계산: 두 지점 간 실제 이동 거리 및 시간 계산
- 지도 표시: 여행 경로와 장소를 지도에 시각화
- 경로 최적화: 최단 거리/시간 기반 동선 최적화

기술 구현:
```python
class KakaoMapService:
    def search_places(keyword, x, y, radius, category):
        """장소 검색 API"""
    
    def calculate_distance(origin, destination):
        """거리 계산 API"""
    
    def optimize_route(places):
        """경로 최적화 알고리즘"""
```

2. AI 기반 여행 계획 생성 (최우선순위)

핵심 동작:
- 사용자 선호도 분석: 여행 스타일(여유/효율), 동반자 유형
- 시간대별 최적화: 방문 시간대에 따른 장소 추천
- 날씨/계절 고려: 실시간 날씨 정보 기반 실내/외 활동 조정
- 식사 시간 자동 감지: 적절한 시간대에 음식점 배치
- 동선 최적화: 이동 거리와 시간을 최소화하는 경로 생성

기술 구현:
```python
class AITripRecommender:
    def analyze_preferences(user_data):
        """사용자 선호도 분석"""
    
    def optimize_by_time(places, start_time, end_time):
        """시간대별 최적화"""
    
    def adjust_for_weather(plan, weather_data):
        """날씨 기반 계획 조정"""
    
    def generate_trip_plan(preferences, duration, location):
        """통합 여행 계획 생성"""
```

3. Flutter 모바일 애플리케이션 (최우선순위)

핵심 구현:
- 크로스플랫폼: iOS/Android 동시 지원
- 카카오맵 SDK 통합: 네이티브 지도 표시
- 실시간 동기화: 서버와 앱 간 데이터 동기화
- 오프라인 지원: 여행 계획 로컬 저장 및 오프라인 접근
- 푸시 알림: 여행 일정 리마인더, 날씨 변화 알림

앱 구조:
```dart
// 주요 화면
- SplashScreen: 앱 시작 화면
- HomeScreen: 메인 대시보드
- TripPlanScreen: 여행 계획 상세 보기
- MapScreen: 카카오맵 기반 지도 화면
- SearchScreen: 장소 검색
- ProfileScreen: 사용자 설정

// 핵심 서비스
- ApiService: 백엔드 API 통신
- MapService: 카카오맵 SDK 래퍼
- StorageService: 로컬 데이터 저장
- NotificationService: 푸시 알림 처리
```

기술 아키텍처(Technical Architecture)
백엔드 구조:
- Django 5.0.6 + Django REST Framework
- MySQL 8.0 데이터베이스
- Redis 캐싱 (선택사항)
- Celery 비동기 작업 처리

모바일 앱 구조:
- Flutter 3.x (최신 stable 버전)
- 상태관리: Provider 또는 Riverpod
- HTTP 클라이언트: Dio
- 로컬 저장소: SQLite/Hive
- 지도: kakao_flutter_sdk

외부 API 연동:
- 카카오맵 API (필수)
- 날씨 API (OpenWeatherMap 또는 기상청)
- 한국관광공사 공공데이터 API

개발 우선순위(Development Priority)
Phase 1: 핵심 인프라 (1-2주)
1. Django 백엔드 초기 설정
2. 카카오맵 API 연동 및 기본 기능 구현
3. Flutter 프로젝트 설정 및 기본 UI

Phase 2: 핵심 기능 구현 (3-4주)
1. AI 여행 추천 알고리즘 개발
2. Flutter 앱 주요 화면 구현
3. 카카오맵 SDK 통합
4. API 연동 및 데이터 동기화

Phase 3: 고급 기능 (2-3주)
1. 오프라인 모드 구현
2. 푸시 알림 시스템
3. 성능 최적화
4. 사용자 경험 개선

주요 기술적 도전과제(Technical Challenges)
1. 카카오맵 API 최적화
- Rate limiting 대응
- 대량 장소 검색 시 성능 관리
- 실시간 경로 계산 최적화

2. AI 알고리즘 성능
- 복잡한 여행 계획 생성 시간 단축
- 다중 제약조건 하에서의 최적화
- 사용자 피드백 기반 학습

3. Flutter 앱 성능
- 지도 렌더링 최적화
- 메모리 효율적인 이미지 처리
- 배터리 소모 최소화

성공 지표(Success Metrics)
- API 응답 시간: 평균 500ms 이내
- AI 계획 생성 시간: 5초 이내
- 앱 크래시율: 1% 미만
- 오프라인 모드 신뢰성: 99%
- 사용자 만족도: 4.5/5 이상

리스크 관리(Risk Management)
1. 카카오맵 API 의존성
- 백업 지도 서비스 검토
- 자체 지오코딩 데이터베이스 구축

2. AI 알고리즘 복잡도
- 단계적 구현 및 검증
- 폴백 알고리즘 준비

3. 크로스플랫폼 이슈
- 플랫폼별 테스트 강화
- 네이티브 모듈 최소화